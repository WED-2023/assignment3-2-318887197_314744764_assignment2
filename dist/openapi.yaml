openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
  # local:
  - url: "http://127.0.0.1:80"
    # remote:
    # - url: "http://132.72.65.211"
    description: SwaggerHub API Auto Mocking hey
tags:
  - name: Auth
    description: All authentication related routes
  - name: Users
    description: All the user's personal app info
  - name: Recipes
    description: All reciepes general info
paths:

  /alive:
    get:
      tags:
        - guests
      summary: Check if the server is alive
      operationId: checkAlive
      description: |
        The server returns a simple message to check if it is alive
      responses:
        '200':
          description: The server is alive
          content:
            text/plain:
              schema:
                type: string
                example: The server is alive

  /recipes/info:
    get:
      tags:
        - Recipe
      summary: Get full details of a recipe by its id
      description: This path returns the full details of a recipe by its id. The id should start with 'L' for local recipes or 'S' for Spoonacular recipes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  example: L123
                  pattern: '^(L|S)[1-9][0-9]*$'
              required:
                - recipeId
              description: The recipe id (starts with 'L' for local or 'S' for Spoonacular)
      responses:
        '200':
          description: Full recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid recipe ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid recipe ID
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Recipe not found
  
  /recipes/random:
    get:
      tags:
        - Recipe
      summary: Get a list of random recipes
      description: Returns a list of random recipes from both local and remote sources.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: integer
                  minimum: 1
                  default: 3
                  description: The number of random recipes to return (default is 3)
              required:
                - number
      responses:
        '200':
          description: A list of random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid number parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid number parameter
        '404':
          description: No recipes found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No recipes found
          
  /recipes/Search:
    post:
      tags:
        - Recipe
      summary: Search for recipes using cuisine, diet, intolerances, and title
      operationId: SearchRecipe
      description: |
        Search for recipes using optional body parameters: title, cuisine, diet, intolerances, and amount.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Search query to match the recipe title.
                cuisine:
                  type: string
                  description: The cuisine of the recipe (e.g., "Italian", "Mexican").
                diet:
                  type: string
                  enum: [Vegan, Vegetarian, Gluten Free, Ketogenic, Pescetarian, Paleo]
                  description: The diet to match for the recipe.
                intolerances:
                  type: array
                  items:
                    type: string
                  description: A list of intolerances to exclude (e.g., ["gluten", "dairy"]).
                amount:
                  type: integer
                  minimum: 1
                  default: 5
                  description: The maximum number of recipe IDs to return.
      responses:
        '200':
          description: A list of matching recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: L123
        '400':
          description: Invalid filter parameters
        '500':
          description: Server error
 
  /Register:
    post:
      tags:
        - User
      summary: Register a new user
      operationId: registerUser
      description: Register a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
        '409':
          description: Username taken
        '400':
          description: Invalid input

  /Login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed

  /Logout:
    post:
      tags:
        - User
      summary: Logout the current user
      operationId: logoutUser
      description: Logout the current user and clear the session.
      responses:
        '200':
          description: Logout succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean 
    
  /users/favorites:
    post:
      tags:
        - User
      summary: Add a recipe to the user's favorites
      operationId: addFavoriteRecipe
      description: Save a recipe as a favorite for the logged-in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: The ID of the recipe to add to favorites
      responses:
        '200':
          description: Recipe successfully saved as favorite
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully saved as favorite
        '401':
          description: Unauthorized

    get:
      tags:
        - User
      summary: Get the user's favorite recipe IDs
      operationId: getFavoriteRecipes
      description: Retrieve the list of favorite recipe IDs for the logged-in user.
      responses:
        '200':
          description: List of favorite recipe IDs sorted by newest first
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: L123
        '401':
          description: Unauthorized
  
    delete:
      tags:
        - User
      summary: Remove a recipe from the user's favorites
      operationId: removeFavoriteRecipe
      description: Remove a recipe from the user's favorites.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: The ID of the recipe to remove from favorites
      responses:
        '200':
          description: Recipe successfully removed from favorites
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully removed from favorite
        '401':
          description: Unauthorized

  /users/likes:
    post:
      tags:
        - User
      summary: Add a recipe to the user's liked list
      operationId: addLikedRecipe
      description: Mark a recipe as liked for the logged-in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: The ID of the recipe to mark as liked (e.g., L123 or S456)
      responses:
        '200':
          description: Recipe successfully saved as liked
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully saved as liked
        '401':
          description: Unauthorized

    get:
      tags:
        - User
      summary: Get the user's liked recipe IDs
      operationId: getLikedRecipes
      description: Retrieve the list of liked recipe IDs for the logged-in user.
      responses:
        '200':
          description: List of liked recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: L123
        '401':
          description: Unauthorized

    delete:
      tags:
        - User
      summary: Remove a recipe from the user's liked list
      operationId: removeLikedRecipe
      description: Remove a recipe from the user's liked list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: The ID of the recipe to remove from likes (e.g., L123 or S456)
      responses:
        '200':
          description: Recipe successfully removed from likes
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully removed from likes
        '401':
          description: Unauthorized

  /users/watched:
    post:
      tags:
        - User
      summary: Add a recipe to the user's watched list
      operationId: addWatchedRecipe
      description: Mark a recipe as watched for the logged-in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: The ID of the recipe to mark as watched (e.g., L123 or S456)
      responses:
        '200':
          description: Recipe successfully saved as watched
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully saved as watched
        '401':
          description: Unauthorized

    get:
      tags:
        - User
      summary: Get the user's watched recipe IDs
      operationId: getWatchedRecipes
      description: Retrieve the list of watched recipe IDs for the logged-in user.
      responses:
        '200':
          description: List of watched recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: S456
        '401':
          description: Unauthorized

    delete:
      tags:
        - User
      summary: Remove a recipe from the user's watched list
      operationId: removeWatchedRecipe
      description: Remove a recipe from the user's watched list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: The ID of the recipe to remove from watched (e.g., L123 or S456)
      responses:
        '200':
          description: Recipe successfully removed from watched
          content:
            text/plain:
              schema:
                type: string
                example: The Recipe successfully removed from watched
        '401':
          description: Unauthorized

  /users/myRecipes:
    get:
      tags:
        - User
      summary: Get all non-family recipe IDs created by the logged-in user
      operationId: getMyRecipes
      description: Returns a list of recipe IDs for all recipes created by the user that are not family recipes.
      responses:
        '200':
          description: List of the user's non-family recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: L123
        '401':
          description: Unauthorized

    post:
      tags:
        - User
      summary: Add a new recipe created by the logged-in user
      operationId: addMyRecipe
      description: Add a new recipe to the database for the logged-in user. Returns the new recipe's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  $ref: '#/components/schemas/Recipe'
              required:
                - recipe
      responses:
        '200':
          description: Recipe successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: string
                    example: L123
                    description: The ID of the newly created recipe (prefixed with 'L')
        '400':
          description: Invalid recipe data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid recipe data
        '401':
          description: Unauthorized

  /users/myFamilyRecipes:
    get:
      tags:
        - User
      summary: Get all family recipe IDs created by the logged-in user
      operationId: getMyFamilyRecipes
      description: Returns a list of recipe IDs for all family recipes created by the user.
      responses:
        '200':
          description: List of the user's family recipe IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: L456
        '401':
          description: Unauthorized

components:
  schemas:
  
    Recipe:
      type: object
      required:
        - title
        - readyInMinutes
        - servings
        - glutenFree
        - vegan
        - vegetarian
        - ingredients
        - instructions
        - image
        - aggregateLikes
        - family_creator
        - family_occasion
        - family_pictures
      properties:
        id:
          type: string
          example: S1
          description: The recipe id, prefixed with 'L' for local or 'S' for Spoonacular
        title:
          type: string
          example: Fried Anchovies with Sage
        readyInMinutes:
          type: integer
          example: 45
        servings:
          type: integer
          example: 3
        glutenFree:
          type: boolean
          example: false
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: false
        ingredients:
          type: array
          description: Each ingredient is an array of [name, amount, unit]
          items:
            type: array
            items:
              oneOf:
                - type: string
                - type: number
          example:
            - [ "anchovies", 1, "lb" ]
            - [ "baking powder", 1, "teaspoon" ]
            - [ "egg", 1, "" ]
            - [ "flour", 1, "cup" ]
            - [ "sage", 1, "leaves" ]
            - [ "salt", 1, "teaspoon" ]
            - [ "seltzer water", 3, "servings" ]
            - [ "vegetable oil", 3, "servings" ]
        instructions:
          type: string
          example: "<p>If you have not tried anchovies before - you must try them now! ...</p>"
        image:
          type: string
          format: uri
          example: "https://img.spoonacular.com/recipes/1-556x370.jpg"
        aggregateLikes:
          type: integer
          example: 3
          description: The total number of likes for the recipe
        family_creator:
          type: string
          nullable: true
          example: null
          description: The family member that created this recipe (null for non-family recipes)
        family_occasion:
          type: string
          nullable: true
          example: null
          description: The occasion for which the recipe was created (null for non-family recipes)
        family_pictures:
          type: array
          items:
            type: string
            format: uri
          example: []
          description: Images related to the family recipe (empty array for non-family recipes)
              
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12

    User:
      type: object
      required: [username, firstname, lastname, country, password, email]
      description: Object representing users registered in the website. The username and email must be unique.
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          pattern: '^[a-zA-Z]+$'
          example: proCook
        firstname:
          type: string
          maxLength: 100
          example: Britney
        lastname:
          type: string
          maxLength: 100
          example: Spears
        country:
          type: string
          maxLength: 100
          example: Botswana
        password:
          type: string
          minLength: 5
          maxLength: 10
          pattern: '^(?=.*[0-9])(?=.*[^a-zA-Z0-9]).+$'
          example: super@1
          description: Must be 5-10 characters, contain at least one number and one special character
        email:
          type: string
          format: email
          maxLength: 255
          example: RealEmail@gmail.com
            
    RecipeSearch:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search text for the recipe name or dish.
          example: pizza
        cuisine:
          type: string
          description: Cuisine type to filter by. Options should be stored on the client.
          example: Italian
        diet:
          type: string
          description: Diet type to filter by. Options should be stored on the client.
          example: vegetarian
        intolerances:
          type: string
          description: Comma-separated list of intolerances. Options should be stored on the client.
          example: gluten,dairy
        number:
          type: integer
          description: Number of results to return (must be 5, 10, or 15)
          enum: [5, 10, 15]
          default: 5
          